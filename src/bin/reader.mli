(*****************************************************************************)
(* Open Source License                                                       *)
(* Copyright (c) 2021 Ã‰tienne Marais <etienne.marais@nomadic-labs.com>       *)
(* Copyright (c) 2021 Nomadic Labs, <contact@nomadic-labs.com>               *)
(*                                                                           *)
(* Permission is hereby granted, free of charge, to any person obtaining a   *)
(* copy of this software and associated documentation files (the "Software"),*)
(* to deal in the Software without restriction, including without limitation *)
(* the rights to use, copy, modify, merge, publish, distribute, sublicense,  *)
(* and/or sell copies of the Software, and to permit persons to whom the     *)
(* Software is furnished to do so, subject to the following conditions:      *)
(*                                                                           *)
(* The above copyright notice and this permission notice shall be included   *)
(* in all copies or substantial portions of the Software.                    *)
(*                                                                           *)
(* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR*)
(* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  *)
(* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL   *)
(* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER*)
(* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING   *)
(* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER       *)
(* DEALINGS IN THE SOFTWARE.                                                 *)
(*                                                                           *)
(*****************************************************************************)

(** The Reader module provides primitives for extracting information
    within the files generated by ppx-tezos_oxymeter. *)

(** This modules keeps track of the content of a file with metadata *)
module Info : sig
  (** Abstract type to represent an info. *)
  type t

  (** A type selector to describ the type of measure made. *)
  type measure = private Energy | Time

  (** [create ~date ~time measure json] a new {!t}. *)
  val create : date:string -> time:string -> measure -> Ezjsonm.t -> t

  (** [date info] gets the date value from {!t}. *)
  val date : t -> string

  (** [time info] gets the time value from {!t}. *)
  val time : t -> string

  (** [measure info] gets the measure value from {!t}. *)
  val measure : t -> measure

  (** [json info] gets the json from {!t}. *)
  val json : t -> Ezjsonm.t
end

(** This module gathers information about the reports generated. *)
module Data : sig
  (** Abstract type to represent the data from the reports. *)
  type t

  (** Returns an empty {!t}. *)
  val empty : t

  (** Gets the list of the energy reports. *)
  val energy : t -> Info.t list

  (** Gets the list of the time reports. *)
  val time : t -> Info.t list
end

(** [extract_data_from_r path] extracts the data in the directory specify by
     the [path]. *)
val extract_data_from_r : string -> (Data.t, string) result
